% INPUT FILE

%% Reference point and Area of interest
geo.referencePoint = [170.465; -43.986];    % Longitude and Latitude in degrees for arbitrary reference point of local coordinates system [Lon; Lat;] %% I'M USING MTJO
geo.boundingBox = [169.25; -42.8; 171.5; -44.8;];  % Coordinates in degrees of upper left and lower right limits of area of interest [UL_Lon,UL_Lat,LR_Lon,LR_Lat]
geo.faulttracefile='/nfs/a285/homes/eejdm/InSAR/AF_fault_trace.txt'; % (Optional) Co-ordinates of known fault trace
geo.fault_strike=235;

%% InSAR data
% Make sure insarID is unique!

insarID = 1;                            % InSAR dataset unique identifier

insar{insarID}.dataPath = '/nfs/see-fs-02_users/eejdm/scripts/insar/GBIS/GBIS_V1.0/Example/Data/S1A20160615-20160627dsc.mat'; % Path to data file
insar{insarID}.wavelength = 0.056;      % Wavelength in m (e.g., Envisat/ERS/Sentinel: 0.056; CSK/TSX/TDX: 0.031)
insar{insarID}.constOffset = 'y';       % Remove constant offset? 'y' or 'n'
insar{insarID}.rampFlag = 'y';          % Remove linear ramp? 'y' or 'n'
insar{insarID}.sillExp = 6.7e-06;       % Variogram sill in m^2
insar{insarID}.range = 11700;            % Variogram range in m
insar{insarID}.nugget = 1.6e-17;         % Variogram nugget in m
insar{insarID}.quadtreeThresh = 0.014^2; % Quadtree threshold variance (e.g., 0.01^2 m or 1e-04 m)

%%

insarID = 2;                            % InSAR dataset unique identifier

insar{insarID}.dataPath = '/nfs/see-fs-02_users/eejdm/scripts/insar/GBIS/GBIS_V1.0/Example/Data/CSK20160614-20160625asc.mat'; % Path to data file
insar{insarID}.wavelength = 0.031;      % Wavelength in m (e.g., Envisat/ERS/Sentinel: 0.056; CSK/TSX/TDX: 0.031)
insar{insarID}.constOffset = 'y';       % Remove constant offset? 'y' or 'n'
insar{insarID}.rampFlag = 'y';          % Remove ramp? 'y' or 'n'
insar{insarID}.sillExp = 9.7e-06;      % Variogram sill in m^2
insar{insarID}.range = 8300;            % Variogram range in m
insar{insarID}.nugget = 6e-17;          % Variogram nugget in m
insar{insarID}.quadtreeThresh = 0.014^2;  % Quadtree threshold variance (e.g., 0.01^2 m or 1e-04 m)


%% GPS data
gpsID = 1;
gps{gpsID}.dataPath = '/nfs/a285/homes/eejdm/InSAR/combined_inversion/UTM_data/GBIS_output/data/3comp_insar.txt';   % Path to GPS data file
gps{gpsID}.weight = 1/1;    % Weight of GPS data vs. InSAR data in inversion (e.g., 10/1)

gpsID = 2;
gps{gpsID}.dataPath = '/nfs/a285/homes/eejdm/InSAR/combined_inversion/UTM_data/GBIS_output/data/real_gps.txt';   % Path to GPS data file
gps{gpsID}.weight = 10/1;    % Weight of GPS data vs. InSAR data in inversion (e.g., 10/1)
%% Model parameters

modelInput.nu = 0.25;     % Poisson's ratio (Shear modulus is set to 1)

% McTigue 'T'
%                                    X       Y      Z     R   DP/mu
modelInput.mctigue{1}.start = [ -7000;   4000;  3000; 1000; -10e-04; ];  % starting model
modelInput.mctigue{1}.step =  [   100;    100;    50;    0;   1e-04; ];  % initial maximium step size
modelInput.mctigue{1}.lower = [-16000;  -8000;   100; 1000;   -10e3; ];  % lower bounds on m
modelInput.mctigue{1}.upper = [     0;  12000; 10000; 1000;    10e3; ];  % upper bounds on m

% Rectangular dipping dike (Okada) 'D'
%                               L       W      Z     Dip    Str      X       Y     Op
modelInput.dike{1}.start = [ 7000;   2000;   500;  -75.0;   270;  10000;  -3000;  1.0];    % starting model
modelInput.dike{1}.step =  [   50;     50;   100;      1;     1;    100;    100; 0.01];    % initial maximium step size
modelInput.dike{1}.lower = [  100;    100;   100;  -89.9;   180;   3000;  -9000;  0.1];    % lower bounds on m
modelInput.dike{1}.upper = [15000;  10000; 10000;   -0.1;   360;  15000;   3000; 10.0];    % upper bounds on m

% Mogi 'M'
%                               X       Y      Z      DV
modelInput.mogi{1}.start = [    0;     0;   3000;    -1e6; ];      % starting model
modelInput.mogi{1}.step =  [   50;    50;    100;    1e05; ];      % initial maximium step size
modelInput.mogi{1}.lower = [-8000; -2000;    100;    -1e9; ];      % lower bounds on m
modelInput.mogi{1}.upper = [ 8000;  9000;  10000;    -1e2; ];      % upper bounds on m

% Rectangular fault (Okada) 'F'
%                               L       W      Z     Dip     Str      X       Y      SS       DS
modelInput.fault{1}.start = [ 5000;   2000;   500;  -75.0;   270;  10000;  -3000;   1.0;     1.0];    % starting model
modelInput.fault{1}.step =  [   50;     50;   500;      1;     1;    100;    100;  0.01;    0.01];    % initial maximium step size
modelInput.fault{1}.lower = [  100;    100;   100;  -89.9;   180;   3000;  -7000; -10.0;   -10.0];    % lower bounds on m
modelInput.fault{1}.upper = [10000;  10000; 10000;   -0.1;   360;  15000;      0;  10.0;    10.0];    % upper bounds on m

% Penny-shaped crack 'P'
%                                 X       Y      Z     R    DP/mu
modelInput.penny{1}.start = [     0;      0;  2000; 1000; -1e-03; ];    % starting model
modelInput.penny{1}.step =  [   100;    100;    50;  100;  1e-04; ];    % initial maximium step size
modelInput.penny{1}.lower = [-20000; -20000;   100;  100;   -1e3; ];    % lower bounds on m
modelInput.penny{1}.upper = [ 20000;  20000; 30000; 2000;    1e3; ];    % upper bounds on m

% Yang 'Y'
%                                X       Y      Z      a     a/b  Str    Pln    DP/mu
modelInput.yang{1}.start = [     0;      0;  5000;   500;    0.5; 270; -89.9; -1e-03;];    % starting model
modelInput.yang{1}.step =  [   100;    100;    50;    50;    .01;   1;     1;  1e-04;];    % initial maximium step size
modelInput.yang{1}.lower = [-20000; -20000;  1000;     1;   0.01;   1; -89.9;   -1e3;];    % lower bounds on m
modelInput.yang{1}.upper = [ 20000;  20000; 30000; 20000;   0.99; 359;  -0.1;    1e3;];    % upper bounds on m

% Horizontal rectangular sill (Okada) 'S'
%                               L     W      Z   Str     X      Y    Op
modelInput.sill{1}.start = [ 2000; 2000;  1100;  180;-2000;  2000;   -1.0;]; % starting model
modelInput.sill{1}.step  = [   50;   50;    50;    1;  100;   100;    0.01];  % initial maximium step size
modelInput.sill{1}.lower = [  300;  300;   100;    1;-20000; -20000;  -50];  % lower bounds on m
modelInput.sill{1}.upper = [10000;10000; 10000;  359; 20000;  20000; -0.01];  % upper bounds on m

% Hinged double dike (custom made) 'H'
%                              X_1     Y_1     L_1     W_1     Z_1    Dip_1     Op_1    W_2   Dip_2  Op_2  Strike
modelInput.hing{1}.start = [   100;    100;   1000;   1000;     10;   -85.0;    0.5;  1000;   -10.0;  0.5;    30]; % starting model
modelInput.hing{1}.step =  [   100;    100;    100;    100;    100;       1;   0.01;   100;       1; 0.01;     1]; % initial maximium step size
modelInput.hing{1}.lower = [  -200;   -200;    100;    100;      1;   -89.9;   0.01;   100;   -89.9; 0.01;     1]; % lower bounds on m
modelInput.hing{1}.upper = [   200;    200;   7000;   7000;    200;    -0.1;   10.0;  9000;   -0.01; 10.0;   359]; % upper bounds on m

% Hinged rectangular fault (Okada) 'B' for bent
%                               L(m)   W1(m)   Z(m) Dip1(deg) Str(deg)    X(m)     Y(m)   SS1(m)  DS1(m)    W2(m)  Dip2(deg)   SS2(m)  DS2(m)
modelInput.fhin{1}.start = [    1e6;   15e3;  15e3;      -50;     235;   -0e4;   7.5e4;    0.03;  -0.01;     1e6;        -1;       0;      0]; % starting model
modelInput.fhin{1}.step =  [      0;    1e3;   100;        0;       0;      0;       0;    0.01;   0.01;       0;         0;    0.01;   0.01]; % initial maximium step size
modelInput.fhin{1}.lower = [    1e6;    1e3;     1;    -50.0;     235;   -0e4;   7.5e4;      -1;     -1;     1e6;        -1;      -1;     -1]; % lower bounds on m
modelInput.fhin{1}.upper = [    1e6;   30e3;  30e3;    -50.0;     235;    0e4;   7.5e4;       1;      1;     1e6;        -1;       1;      1]; % upper bounds on m
modelInput.fhin{1}.link  = [      0;      0;     0;        0;       0;      0;       0;       0;      0;       0;         0;       0;      0]; % Flag to hold one value to that of another (eg same SS on both sections)

% Split fault (Okada) 'W' for wrenched (Fault 1 north, Fault 2 south)
%                              L(m)   Zbase(m) Zlock(m)  Dip1(deg) Str(deg)   X(m)    Y(m)   SS1(m)  DS1(m)  Dip2(deg) SS2(m) DS2(m)
modelInput.split{1}.start = [  5e6;      35e3;    15e3;     -65.0;     235;  -2e4;  4.0e4;    0.03;  -0.01;       -60;  0.03; -0.01];    % starting model
modelInput.split{1}.step =  [    0;         0;     100;         1;       0;   100;    100;    0.00;   0.00;         1;  0.00;  0.00];    % initial maximium step size
modelInput.split{1}.lower = [  0e6;      35e3;    13e3;     -75.0;     235;  -4e4;  2.0e4;      -1;     -1;       -70;    -1;    -1];    % lower bounds on m
modelInput.split{1}.upper = [  5e6;      35e3;    18e3;     -55.0;     235;   0e4;  6.0e4;       1;      1;       -50;     1;     1];    % upper bounds on m
modelInput.split{1}.linktotrace = 0; % Flag to ensure location of faultsplit is kept onto surface trace if faulttracefile is provided

% Split Hinged Fault (Okada x4) 'C' for crazy (Split 1 north, Split 2 south)
%                                    1;   2;     3;    4;        5;        6;    7;        8;     9;    10;   11;       12;    13;    14;   15;       16;       17;   18;       19;    20;    21;   22;       23;   24;    25];
%                              Str(deg) X(m)   Y(m) L1(m) Zlock1(m) Zbase1(m) W1(m) Dip1(deg) SS1(m) DS1(m) W2(m) Dip2(deg) SS2(m) DS2(m) L3(m) Zlock2(m) Zbase2(m) W3(m) Dip3(deg) SS3(m) DS3(m) W4(m) Dip4(deg) SS4(m) DS4(m)
modelInput.bsplt{1}.start = [      235;   0; 7.5e4;  1e8;     15e3;     35e3; 15e3;      -60;  0.03;  0.01;  1e9;       -1;     0;  0.00;  1e8;     15e3;     35e3; 15e3;      -60;  0.03;  0.01;  1e9;       -1;    0;  0.01];    % starting model
modelInput.bsplt{1}.step  = [        1;   1;   100;  100;      100;      100;  100;        1;  0.01;  0.01;  100;        1;  0.01;  0.01;  100;      100;      100;  100;        1;  0.01;  0.01;  100;     0.01; 0.01;  0.01];    % initial maximium step size
modelInput.bsplt{1}.lower = [      180;-1e4;   0e4;  1e3;     10e3;     30e3; 10e3;      -89;    -1;    -1;  1e3;       -1;    -1;    -1;  1e3;     10e3;     30e3; 10e3;      -89;    -1;    -1;  1e3;       -1;   -1;    -1];    % lower bounds on m
modelInput.bsplt{1}.upper = [      359; 1e4; 7.5e4;  1e9;     20e3;     40e3; 30e3;      -01;     1;     1;  1e9;       -1;     1;     1;  1e9;     20e3;     40e3; 30e3;      -01;     1;     1;  1e9;       -1;    1;     1];    % upper bounds on m
modelInput.bsplt{1}.link  = [        0;   0;     0;    0;        0;        0;    0;        0;     0;     0;    0;        0;     0;     0;    0;        0;        0;    0;        0;     0;     0;    0;        0;    0;     0];    % Flag to hold one value to that of another (eg same SS on both sections)

% Backslip model 'N' for normal (as in on a subduction zone)
%                               L       W      Z     Dip     Str      X       Y      SS       DS   Rvel  Lvel
modelInput.bslip{1}.start = [ 5000;   2000;   500;  -75.0;   270;  10000;  -3000;   1.0;     1.0;  0.1;  -0.1];    % starting model
modelInput.bslip{1}.step =  [   50;     50;   500;      1;     1;    100;    100;  0.01;    0.01; 0.01;  0.01];    % initial maximium step size
modelInput.bslip{1}.lower = [  100;    100;   100;  -89.9;   180;   3000;  -7000; -10.0;   -10.0; -1.0;  -1.0];    % lower bounds on m
modelInput.bslip{1}.upper = [10000;  10000; 10000;   -0.1;   360;  15000;      0;  10.0;    10.0;  1.0;   1.0];    % upper bounds on m

% Arctan model (Custom made) 'A'
%                               SS(m)      Z(m)     K   h_off(m)
modelInput.arc{1}.start = [ -38*1e-3;   36*1e3;   0.7;   14*1e3];    % starting model
modelInput.arc{1}.step =  [     1e-3;      100;  0.01;      100];    % initial maximium step size
modelInput.arc{1}.lower = [ -45*1e-3;   25*1e3;   0.5;    0*1e3];    % lower bounds on m
modelInput.arc{1}.upper = [ -30*1e-3;   50*1e3;     1;   30*1e3];    % upper bounds on m

% Distributed Shear Zone (Custom made) 'Z' for Zone
%                               SS(mm)    Z(km) L_edge(km) R_edge(km) h_off(km)
modelInput.disp{1}.start = [    -38.0;    36.0;       -20;         0;     20.0];    % starting model
modelInput.disp{1}.step =  [      1.0;     0.1;       1.0;         0;      1.0];    % initial maximium step size
modelInput.disp{1}.lower = [    -45.0;    25.0;       0.1;       0.0;     -5.0];    % lower bounds on m
modelInput.disp{1}.upper = [    -30.0;    50.0;     -50.0;       0.0;     30.0];    % upper bounds on m

out_extension='';
